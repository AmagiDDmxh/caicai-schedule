{"version":3,"sources":["constants.ts","StudentProvider.tsx","reportWebVitals.ts","utils.ts","components/Datepicker.tsx","AddStudentForm.tsx","StudentList.tsx","StudentSchedules.tsx","BuildingList.tsx","App.tsx","index.tsx"],"names":["STORE_KEY_STUDENT_LIST","DEFAULT_STUDENTS","JSON","parse","window","localStorage","getItem","StudentContext","createContext","StudentProvider","children","useState","editing","students","setStudents","selectedStudent","Provider","value","addStudent","student","id","uuid","editStudent","removeStudent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dj","extend","isLeapYearPlugin","generateMonth","Array","now","month","isLeapYear","includes","getCurrentMonthDays","fill","map","_","i","Select","Option","weekDayList","str","toUpperCase","slice","WorkdaySelect","selectedBuilding","buildings","onChange","className","target","building","WeekRow","onSelectRow","row","last","displaySelect","rest","selectedRows","setSelectedRows","renderSelect","index","day","newRows","css","style","width","Datepicker","workdays","displaySelectProp","splitedMonths","splitEvery","handleRowChange","console","log","newWorkdays","flatten","flex","week","rowIndex","rows","length","AddStudentForm","onAddStudent","onSaveStudent","isEdit","months","useMemo","Form","useForm","form","selectedWorkdays","setSelectedWorkdays","useEffect","fields","Object","entries","name","setFields","handleAdd","a","validateFields","formResult","getFieldsValue","onResetForm","handleSaveChanges","resetFields","layout","initialValues","isManager","Item","label","rules","required","message","placeholder","valuePropName","type","block","icon","SaveOutlined","onClick","PlusOutlined","htmlType","CloseOutlined","StudentList","props","onSelectStudent","onRemoveStudent","loading","columns","title","dataIndex","key","render","record","EditOutlined","DeleteOutlined","danger","Title","dataSource","size","pagination","hideOnSinglePage","generateColumns","fixed","operators","first","second","Paragraph","random","max","min","Math","floor","StudentSchedules","data","pageSize","scroll","x","y","tagInputClass","colors","BuildingList","inputVisible","setInputVisible","inputValue","setInputValue","editInputIndex","setEditInputIndex","editInputValue","setEditInputValue","newInputRef","useRef","editInputRef","handleEditInputChange","handleEditInputConfirm","tag","handleInputConfirm","indexOf","marginBottom","ref","onBlur","onPressEnter","isLongTag","tagElem","closable","color","onClose","filter","innerTag","handleClose","onDoubleClick","e","preventDefault","current","setTimeout","focus","RestOutlined","Content","Layout","Sider","Header","useSemiPersistentState","initialValue","item","error","setValue","setItem","stringify","App","setIsEdit","isLoading","setIsLoading","setSelectedStudent","setBuildings","schedules","setSchedules","date","workday","push","handleImportStudentList","fileReader","FileReader","onload","progressEvent","result","newStudents","total","readAsText","files","direction","newStudent","reduce","acc","undefined","multiple","accept","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbd22b08.chunk.js","sourcesContent":["export const STORE_KEY_STUDENT_LIST = '__STUDENT_LIST__';\nexport const STORE_KEY_BUILDING_LIST = '__BUILDING_LIST__';\nexport const STORE_KEY_SCHEDULES = '__SCHEDULES__';\n","import React, { createContext, useContext, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Student } from \"./models\";\nimport { STORE_KEY_STUDENT_LIST } from \"./constants\";\n\ntype StudentFunc = (student: Student) => void;\n\ninterface StudentContextProps {\n  students?: Student[];\n  addStudent?: StudentFunc;\n  selectedStudent?: Student;\n  removeStudent?: StudentFunc;\n  editStudent?: StudentFunc;\n  editing?: boolean;\n}\nconst DEFAULT_STUDENTS: Student[] = JSON.parse(\n  window.localStorage.getItem(STORE_KEY_STUDENT_LIST) ?? \"[]\"\n);\n\n// TODO: default props should be provided?\nconst StudentContext = createContext<StudentContextProps>({});\nexport const useStudent = () => useContext(StudentContext);\n\n// TODO: Finish provider\nconst StudentProvider: React.FC = ({ children }) => {\n  const [editing, setEditing] = useState(false);\n  const [students, setStudents] = useState<Student[]>(DEFAULT_STUDENTS);\n  const [selectedStudent, setSelectedStudent] = useState<Student>();\n\n  const addStudent: StudentFunc = (student) => {\n    setStudents([\n      ...students,\n      {\n        // @ts-ignore\n        // Should be override by student otherwise take this instead\n        id: uuid(),\n        ...student,\n      },\n    ]);\n  };\n  const editStudent = () => {};\n  const removeStudent = () => {};\n\n  return (\n    <StudentContext.Provider\n      value={{\n        students: DEFAULT_STUDENTS,\n        addStudent,\n        editStudent,\n        removeStudent,\n        editing,\n        selectedStudent,\n        // setEditing,\n      }}\n    >\n      {children}\n    </StudentContext.Provider>\n  );\n};\n\nexport default StudentProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import dj from \"dayjs\";\nimport isLeapYearPlugin from \"dayjs/plugin/isLeapYear\";\ndj.extend(isLeapYearPlugin);\n\nconst getCurrentMonthDays = () => {\n  const now = dj();\n  const month = now.month() + 1;\n  const isLeapYear = now.isLeapYear();\n  const isFeb = month === 2;\n  if (isFeb) {\n    if (isLeapYear) return 29;\n    return 28;\n  }\n  const ordinaryMonths = [1, 3, 5, 7, 8, 10, 12];\n  if (ordinaryMonths.includes(month)) return 31;\n  return 31;\n};\n\nexport const generateMonth = () =>\n  Array(getCurrentMonthDays())\n    .fill(0)\n    .map((_, i) => i + 1);","import React, { useState, FC, useMemo } from \"react\";\nimport { BorderInnerOutlined, CheckOutlined } from \"@ant-design/icons\";\nimport { Button, Col, Row, Select, Typography } from \"antd\";\nimport { equals, flatten, splitEvery } from \"ramda\";\nimport { css } from \"emotion\";\nimport { generateMonth } from \"../utils\";\nimport \"./Datepicker.css\";\n\nconst { Option } = Select;\n\nconst capitalize = (str: string) => str[0].toUpperCase() + str.slice(1);\nconst shortWord = (str: string) => str.slice(0, 3) + \".\";\n\nconst weekDayList = [\n  \"monday\",\n  \"tuesday\",\n  \"wendsday\",\n  \"thursday\",\n  \"friday\",\n  \"saturday\",\n  \"sunday\",\n]\n  .map(capitalize)\n  .map(shortWord);\n\ninterface WorkdaySelectProps {\n  buildings: string[];\n  onChange: Function;\n  selectedBuilding?: string;\n}\n\nconst WorkdaySelect: FC<WorkdaySelectProps> = ({\n  selectedBuilding,\n  buildings,\n  onChange,\n}) => {\n  return (\n    <select\n      className=\"date-select\"\n      value={selectedBuilding ?? \"\"}\n      onChange={({ target: { value } }) => {\n        onChange(value);\n      }}\n    >\n      <option value=\"\">-</option>\n      {buildings.map((building) => (\n        <option value={building} key={building}>\n          {building}\n        </option>\n      ))}\n    </select>\n  );\n};\n\ninterface WeekRowProps {\n  row: DateSelect[];\n  buildings: string[];\n  last: boolean;\n  onChange: Function;\n  displaySelect?: boolean;\n  [rest: string]: any;\n}\n\nexport interface DateSelect {\n  day: number;\n  building?: string;\n}\n\nconst WeekRow: FC<WeekRowProps> = ({\n  onSelectRow,\n  row,\n  buildings,\n  last,\n  onChange,\n  displaySelect,\n  ...rest\n}) => {\n  // const [rowHover, setRowHover] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<DateSelect[]>(row);\n\n  const renderSelect = ({ day, building }: DateSelect, index: number) =>\n    displaySelect ? (\n      <WorkdaySelect\n        selectedBuilding={building}\n        buildings={buildings}\n        onChange={(value: string) => {\n          const newRows = [\n            ...selectedRows.slice(0, index),\n            { day, building: value },\n            ...selectedRows.slice(index + 1),\n          ];\n          setSelectedRows(newRows);\n          onChange(newRows);\n        }}\n      />\n    ) : (\n      <span>{building ? `No. ${building}` : \"-\"}</span>\n    );\n\n  return (\n    <Row\n      {...rest}\n      className={css`\n        flex-wrap: nowrap;\n      `}\n    >\n      {/* <Button\n        type=\"dashed\"\n        icon={<CheckOutlined />}\n        onMouseEnter={() => setRowHover(true)}\n        onMouseLeave={() => setRowHover(false)}\n        onClick={() => {\n          // const aWeek = Array(7)\n          //   .fill(0)\n          //   .map((_, i) => index * 7 + i + 1);\n          // if (\n          //   aWeek.every((date) => selectedAvailableDays.includes(date))\n          // ) {\n          //   return setSelectedAvailableDays(\n          //     selectedAvailableDays.filter(\n          //       (date) => !aWeek.includes(date)\n          //     )\n          //   );\n          // }\n          // setSelectedAvailableDays(selectedAvailableDays.concat(aWeek));\n        }}\n      ></Button> */}\n\n      {row.map(({ day, building }, index) => {\n        // const hover = rowHover;\n        return (\n          <Col\n            // span={3}\n            style={{\n              // flex: \"1 1 14.285%\",\n              width: \"14.25%\",\n            }}\n            // flex={last ? undefined : 3}\n            key={day}\n          >\n            <div\n              className={css`\n                border: 1px solid #ccc;\n                display: flex;\n                align-items: center;\n                flex-flow: column nowrap;\n                padding: 5px;\n                margin: 0 2px 1px;\n              `}\n            >\n              <span\n                className={css`\n                  color: gray;\n                `}\n              >\n                {day}\n              </span>\n              {renderSelect({ day, building }, index)}\n            </div>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n};\n\ninterface DatepickerProps {\n  onChange?: Function;\n  workdays: DateSelect[];\n  buildings: string[];\n  // default true\n  displaySelect?: boolean;\n}\n\n// TODO: Refactor row column picker\nconst Datepicker: FC<DatepickerProps> = ({\n  onChange,\n  workdays,\n  buildings,\n  displaySelect: displaySelectProp,\n}) => {\n  const splitedMonths = splitEvery(7, workdays);\n\n  const displaySelect = displaySelectProp ?? true;\n\n  const handleRowChange = (row: DateSelect[], index: number) => {\n    console.log('row change', row)\n    const newWorkdays = [\n      ...splitedMonths.slice(0, index),\n      row,\n      ...splitedMonths.slice(index + 1),\n    ];\n    onChange?.(flatten(newWorkdays));\n  };\n\n  return (\n    <>\n      <Row>\n        {/* <Col span={3}>\n          <Button\n            type=\"dashed\"\n            icon={<BorderInnerOutlined />}\n            onClick={selectAll}\n          ></Button>\n        </Col> */}\n\n        {weekDayList.map((day, index) => (\n          <Col\n            flex={3}\n            key={day}\n            // onMouseEnter={() => setHoverColumn(index)}\n            // onMouseLeave={() => setHoverColumn(-1)}\n            // onClick={() => setSelectedColumn(index)}\n            className={css`text-align: center;`}\n          >\n            {day}\n          </Col>\n        ))}\n      </Row>\n      <div className=\"\">\n        {splitedMonths.map((week, rowIndex) => (\n          <WeekRow\n            className={css`\n              margin-bottom: 5px;\n            `}\n            row={week}\n            key={`week${rowIndex}`}\n            onChange={(rows: DateSelect[]) => handleRowChange(rows, rowIndex)}\n            buildings={buildings}\n            displaySelect={displaySelect}\n            last={rowIndex === splitedMonths.length - 1}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Datepicker;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Space,\n  Checkbox,\n  Divider,\n  InputNumber,\n  Switch,\n  Row,\n  Col,\n  Select,\n} from \"antd\";\nimport {\n  BorderInnerOutlined,\n  CheckOutlined,\n  CloseOutlined,\n  PlusOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { splitEvery, equals } from \"ramda\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { Student } from \"./models\";\nimport \"./AddStudentForm.css\";\nimport { generateMonth } from \"./utils\";\nimport Datepicker, { DateSelect } from \"./components/Datepicker\";\n\nconst capitalize = (str: string) => str[0].toUpperCase() + str.slice(1);\nconst shortWord = (str: string) => str.slice(0, 3) + \".\";\n\nconst { Option } = Select;\n\nconst weekDays = [\n  \"monday\",\n  \"tuesday\",\n  \"wendsday\",\n  \"thursday\",\n  \"friday\",\n  \"saturday\",\n  \"sunday\",\n]\n  .map(capitalize)\n  .map(shortWord);\n\ninterface FormProps {\n  onAddStudent: Function;\n  onSaveStudent: Function;\n  isEdit: boolean;\n  student?: Student;\n  buildings: string[];\n}\n\nconst AddStudentForm: React.FC<FormProps> = ({\n  onAddStudent,\n  onSaveStudent,\n  student,\n  isEdit,\n  buildings,\n}) => {\n  const months = useMemo(() => generateMonth(), []);\n  const [form] = Form.useForm<Student>();\n\n  const [selectedWorkdays, setSelectedWorkdays] = useState<DateSelect[]>(\n    months.map((day) => ({ day }))\n  );\n\n  useEffect(() => {\n    if (student && isEdit) {\n      const fields: { name: string; value: any }[] = Object.entries(\n        student\n      ).map(([name, value]) => ({ name, value }));\n      form.setFields(fields);\n      setSelectedWorkdays(student.workdays);\n    }\n  }, [student, isEdit, form]);\n\n  const handleAdd = async () => {\n    const validate = await form.validateFields();\n    if (!validate) return;\n\n    const formResult = {\n      ...form.getFieldsValue(),\n      workdays: selectedWorkdays,\n    };\n\n    if (isEdit && formResult.id === student!.id) {\n      formResult.id = uuid();\n    }\n\n    onAddStudent(formResult);\n\n    onResetForm();\n  };\n\n  const handleSaveChanges = async () => {\n    const validate = await form.validateFields();\n    if (!validate) return;\n\n    const formResult = {\n      ...form.getFieldsValue(),\n      workdays: selectedWorkdays,\n    };\n    onSaveStudent(formResult);\n    onResetForm();\n  };\n\n  const onResetForm = () => {\n    form.resetFields();\n    setSelectedWorkdays(months.map((day) => ({ day })));\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"student\"\n      layout=\"vertical\"\n      initialValues={{ isManager: false }}\n    >\n      <Form.Item\n        label=\"Name\"\n        name=\"name\"\n        rules={[{ required: true, message: \"Missing name\" }]}\n      >\n        <Input placeholder=\"Name of the student\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"isManager\"\n        valuePropName=\"checked\"\n        label=\"Is She or He a Manager?\"\n      >\n        <Switch />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Living Building\"\n        name=\"building\"\n        rules={[{ required: true, message: \"Missing building\" }]}\n      >\n        {/* <InputNumber placeholder=\"Living Building Number\" min={1} max={20} /> */}\n        <Select>\n          {buildings.map((building) => (\n            <Option value={building} key={building}>\n              {building}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item\n        label=\"Student ID\"\n        name=\"id\"\n        // rules={[{ required: true, message: \"Missing building\" }]}\n      >\n        <Input placeholder=\"Student ID\" />\n      </Form.Item>\n\n      <Form.Item name=\"workdays\" label=\"Workdays\">\n        <Datepicker\n          buildings={buildings}\n          workdays={selectedWorkdays}\n          onChange={(workdays: DateSelect[]) => {\n            setSelectedWorkdays(workdays);\n          }}\n        ></Datepicker>\n        {/* <Row>\n          <Col span={3}>\n            <Button\n              type=\"dashed\"\n              icon={<BorderInnerOutlined />}\n              onClick={() => {\n                if (equals(selectedAvailableDays, months)) {\n                  return setSelectedAvailableDays([]);\n                }\n                setSelectedAvailableDays(months.slice());\n              }}\n            ></Button>\n          </Col>\n\n          {weekDays.map((day, index) => {\n            const weekday = (index + 1) % 7;\n\n            return (\n              <Col\n                span={3}\n                key={day}\n                onMouseEnter={() => setWeekHover(weekday)}\n                onMouseLeave={() => setWeekHover(undefined)}\n                onClick={() => {\n                  const availables = months.filter(\n                    (date) => date % 7 === weekday\n                  );\n                  // if already has\n                  if (\n                    availables.every((date) =>\n                      selectedAvailableDays.includes(date)\n                    )\n                  ) {\n                    return setSelectedAvailableDays(\n                      selectedAvailableDays.filter(\n                        (date) => !availables.includes(date)\n                      )\n                    );\n                  }\n                  setSelectedAvailableDays([\n                    ...selectedAvailableDays,\n                    ...availables,\n                  ]);\n                }}\n                className=\"weekday\"\n              >\n                {day}\n              </Col>\n            );\n          })}\n        </Row>\n        <Checkbox.Group\n          className=\"checkbox-group\"\n          value={selectedAvailableDays}\n          onChange={(availables) => {\n            setSelectedAvailableDays(availables as number[]);\n          }}\n        >\n          {splitEvery(7, months).map((week, index) => (\n            <Row key={`week-row-${index}`}>\n              <Button\n                type=\"dashed\"\n                icon={<CheckOutlined />}\n                onMouseEnter={() =>\n                  setWeekRowInterval([index * 7 + 1, index * 7 + 7])\n                }\n                onMouseLeave={() => setWeekRowInterval([])}\n                onClick={() => {\n                  const aWeek = Array(7)\n                    .fill(0)\n                    .map((_, i) => index * 7 + i + 1);\n\n                  if (\n                    aWeek.every((date) => selectedAvailableDays.includes(date))\n                  ) {\n                    return setSelectedAvailableDays(\n                      selectedAvailableDays.filter(\n                        (date) => !aWeek.includes(date)\n                      )\n                    );\n                  }\n                  setSelectedAvailableDays(selectedAvailableDays.concat(aWeek));\n                }}\n              ></Button>\n              {week.map((day) => {\n                const [startInterval, endInterval] = weekRowInterval!;\n\n                const hover =\n                  day % 7 === weekHover ||\n                  (startInterval <= day && day <= endInterval);\n                return (\n                  <Col span={3} key={day}>\n                    <Checkbox\n                      className={`checkbox-column ${hover ? \"hover\" : \"\"}`}\n                      value={day}\n                    >\n                      {day}\n                    </Checkbox>\n                  </Col>\n                );\n              })}\n            </Row>\n          ))}\n        </Checkbox.Group> */}\n      </Form.Item>\n\n      <Divider />\n      {isEdit && (\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            block\n            icon={<SaveOutlined />}\n            onClick={handleSaveChanges}\n          >\n            Save Changes\n          </Button>\n        </Form.Item>\n      )}\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          block\n          icon={<PlusOutlined />}\n          onClick={handleAdd}\n        >\n          {isEdit ? \"Duplicate Student\" : \"Add Student\"}\n        </Button>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"default\"\n          block\n          htmlType=\"button\"\n          icon={<CloseOutlined />}\n          onClick={onResetForm}\n        >\n          Reset Form\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default AddStudentForm;\n","import React, { useState } from \"react\";\nimport { Badge, Button, Card, Row, Space, Table, Tag, Typography } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  ExclamationCircleOutlined,\n  SmileOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\n\nimport { Student } from \"./models\";\nimport { generateMonth } from \"./utils\";\nimport Datepicker, { DateSelect } from \"./components/Datepicker\";\n\ninterface Props {\n  students: Student[];\n  onSelectStudent: Function;\n  onRemoveStudent: Function;\n  buildings: string[];\n  loading: boolean;\n}\n\nconst StudentList: React.FC<Props> = (props) => {\n  const {\n    students,\n    onSelectStudent,\n    onRemoveStudent,\n    buildings,\n    loading,\n  } = props;\n\n  const columns = [\n    {\n      title: \"姓名\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"ID\",\n      dataIndex: \"id\",\n      key: \"id\",\n    },\n    // {\n    //   title: \"Building\",\n    //   dataIndex: \"building\",\n    //   key: \"building\",\n    //   render(building: string) {\n    //     return <span style={{ color: \"blueviolet\" }}>{building}</span>;\n    //   },\n    // },\n\n    {\n      title: \"Workdays\",\n      dataIndex: \"workdays\",\n      key: \"workdays\",\n      width: 800,\n      render: (workdays: DateSelect[]) => (\n        <>\n          <Datepicker\n            workdays={workdays}\n            displaySelect={false}\n            buildings={buildings}\n          ></Datepicker>\n        </>\n      ),\n    },\n    {\n      title: \"Total Workday\",\n      dataIndex: \"total\",\n      key: \"total\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (_: any, record: Student) => {\n        return (\n          <Space>\n            <Button\n              type=\"ghost\"\n              icon={<EditOutlined />}\n              onClick={() => onSelectStudent(record)}\n            >\n              Edit\n            </Button>\n            <Button\n              type=\"ghost\"\n              icon={<DeleteOutlined />}\n              onClick={() => onRemoveStudent(record.id)}\n              danger\n            >\n              Remove\n            </Button>\n          </Space>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Table\n      title={() => <Typography.Title>Student List</Typography.Title>}\n      columns={columns}\n      dataSource={students}\n      size=\"small\"\n      loading={loading}\n      pagination={{ hideOnSinglePage: true }}\n    />\n  );\n};\n\nexport default StudentList;\n","import React, { FC } from \"react\";\nimport { Table, Typography } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport faker from \"faker\";\nimport Column from \"antd/lib/table/Column\";\nimport { generateMonth } from \"./utils\";\n\nexport interface TableProps {\n  date: string | number;\n  [buliding: string]: any;\n}\n\nconst generateColumns: (buildings: string[]) => ColumnsType<TableProps> = (\n  buildings\n) => [\n  {\n    title: \"Date\",\n    dataIndex: \"date\",\n    fixed: \"left\",\n    width: 40,\n  },\n  ...buildings.map((building) => ({\n    title: `Building ${building}`,\n    dataIndex: `building_${building}`,\n    width: 80,\n    render(operators: string[] = []) {\n      const [first, second] = operators;\n\n      return (\n        <>\n          <Typography.Paragraph>{first}</Typography.Paragraph>\n          <Typography.Paragraph>{second}</Typography.Paragraph>\n        </>\n      );\n    },\n  })),\n];\n\n// const BUILDINGS = [...Array(9)].map((_, index) => (index + 1).toString());\n\n/**\n * take a max and a min\n * return integer x such that\n * min <= x < max\n */\nexport const random = (max: number, min = 0) =>\n  Math.floor(Math.random() * (max - min)) + min;\n// const generateArray = (n: number) => [...Array(n)];\n// const shuffle = <T extends any>(arr: T[]) => {\n//   const newArray = arr.slice();\n//   const len = arr.length;\n//   for (let i = 0; i < len; i++) {\n//     const j = random(i);\n//     if (j !== i) {\n//       newArray[i] = newArray[j];\n//     }\n//     newArray[j] = arr[i];\n//   }\n//   return newArray;\n// };\n\n// const operators = generateArray(16).map(() => faker.name.firstName());\n// const randomPickTwo = <T extends any>(arr: T[]) => shuffle(arr).slice(0, 2);\n\n// const generateBuildingOperators = (buildings = BUILDINGS) =>\n//   shuffle(buildings)\n//     .slice(0)\n//     .map((building) => ({\n//       [`building_${building}`]: randomPickTwo(operators),\n//     }))\n//     .reduce((acc, cur) => ({ ...acc, ...cur }), {});\n\n// const DATA = (buildings: string[]) =>\n//   generateMonth().map((date) => ({\n//     date,\n//     ...generateBuildingOperators(buildings),\n//   }));\n\ninterface StudentSchedulesProps {\n  data: TableProps[];\n  buildings: string[];\n  loading: boolean;\n}\n\nconst StudentSchedules: FC<StudentSchedulesProps> = (props) => {\n  const { buildings, data, loading } = props;\n\n  return (\n    <Table\n      title={() => <Typography.Title>Student Schedules</Typography.Title>}\n      loading={loading}\n      pagination={{ pageSize: 32, hideOnSinglePage: true }}\n      columns={generateColumns(buildings)}\n      dataSource={data as any}\n      scroll={{ x: 1280, y: 800 }}\n      size=\"small\"\n    ></Table>\n  );\n};\n\nexport default StudentSchedules;\n","import React, { ChangeEventHandler, useEffect, useRef, useState } from \"react\";\nimport { Tag, Input, Tooltip } from \"antd\";\nimport { PlusOutlined, RestOutlined } from \"@ant-design/icons\";\nimport { css } from \"emotion\";\nimport { random } from \"./StudentSchedules\";\nimport \"./BuildingList.css\";\n\ntype InputChangeHandler = ChangeEventHandler<HTMLInputElement>;\n\n// TODO: style ovoerride by antd, something to do with the style loaders\nconst tagInputClass = css`\n  width: 78px !important;\n  margin-right: 8px !important;\n  vertical-align: top !important;\n`;\n\nconst colors = [\n  \"magenta\",\n  \"red\",\n  \"volcano\",\n  \"orange\",\n  \"gold\",\n  \"lime\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"geekblue\",\n  \"purple\",\n];\n\ninterface BuildingListProps {\n  buildings: string[];\n  onChange: Function;\n}\n\nconst BuildingList: React.FC<BuildingListProps> = ({ buildings, onChange }) => {\n  const [inputVisible, setInputVisible] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [editInputIndex, setEditInputIndex] = useState(-1);\n  const [editInputValue, setEditInputValue] = useState(\"\");\n  const newInputRef = useRef<Input>(null);\n  const editInputRef = useRef<Input>(null);\n\n  useEffect(() => {}, [buildings]);\n\n  const handleEditInputChange: InputChangeHandler = ({ target: { value } }) => {\n    setEditInputValue(value);\n  };\n\n  const handleEditInputConfirm = () => {\n    if (editInputValue) {\n      onChange(\n        buildings.map((tag, index) =>\n          index === editInputIndex ? editInputValue : tag\n        )\n      );\n      setEditInputValue(\"\");\n      setEditInputIndex(-1);\n    }\n  };\n\n  const handleInputChange: InputChangeHandler = ({ target: { value } }) => {\n    setInputValue(value);\n  };\n\n  const handleClose = (tag: string) => {\n    onChange(buildings.filter((innerTag) => innerTag !== tag));\n  };\n\n  const handleInputConfirm = () => {\n    if (inputValue && buildings.indexOf(inputValue) === -1) {\n      onChange([...buildings, inputValue]);\n      setInputVisible(false);\n      setInputValue(\"\");\n    }\n  };\n\n  const showNewInput = () => {\n    setInputVisible(true);\n    // newInputRef.current && newInputRef.current.focus();\n    setTimeout(() => newInputRef.current?.focus(), 0);\n  };\n\n  return (\n    <>\n      <div style={{ marginBottom: 10 }}>\n        {buildings.map((tag, index) => {\n          if (editInputIndex === index) {\n            return (\n              <Input\n                ref={editInputRef}\n                key={tag}\n                size=\"small\"\n                className={tagInputClass}\n                value={editInputValue}\n                onChange={handleEditInputChange}\n                onBlur={handleEditInputConfirm}\n                onPressEnter={handleEditInputConfirm}\n              />\n            );\n          }\n\n          const isLongTag = tag.length > 20;\n\n          const tagElem = (\n            <Tag\n              key={tag}\n              className=\"edit-tag\"\n              closable={true}\n              color={colors[random(colors.length)]}\n              onClose={() => handleClose(tag)}\n              onDoubleClick={(e) => {\n                e.preventDefault();\n                setEditInputIndex(index);\n                setEditInputValue(tag);\n                console.log(editInputRef.current);\n                setTimeout(() => editInputRef.current?.focus(), 0);\n              }}\n            >\n              <span>{isLongTag ? `${tag.slice(0, 20)}...` : tag}</span>\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n            tagElem\n          );\n        })}\n      </div>\n\n      {inputVisible && (\n        <Input\n          ref={newInputRef}\n          type=\"text\"\n          size=\"small\"\n          className={tagInputClass}\n          value={inputValue}\n          onChange={handleInputChange}\n          onBlur={handleInputConfirm}\n          onPressEnter={handleInputConfirm}\n        />\n      )}\n      {!inputVisible && (\n        <Tag className=\"site-tag-plus\" onClick={showNewInput}>\n          <PlusOutlined /> New Building\n        </Tag>\n      )}\n      <Tag className=\"site-tag-plus\" onClick={() => onChange([])}>\n        <RestOutlined /> Clean All\n      </Tag>\n    </>\n  );\n};\n\nexport default BuildingList;\n","import React, {\n  ChangeEventHandler,\n  Dispatch,\n  FormEventHandler,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Card, Space, Layout, Button, Typography, Input } from \"antd\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { Student } from \"./models\";\nimport AddStudentForm from \"./AddStudentForm\";\nimport StudentList from \"./StudentList\";\nimport {\n  STORE_KEY_STUDENT_LIST,\n  STORE_KEY_BUILDING_LIST,\n  STORE_KEY_SCHEDULES,\n} from \"./constants\";\nimport StudentSchedules, { TableProps as Schedule } from \"./StudentSchedules\";\nimport BuildingList from \"./BuildingList\";\nimport { generateMonth } from \"./utils\";\nimport \"./App.css\";\n\nconst month = generateMonth();\nconst { Content, Sider, Header } = Layout;\n\nfunction useSemiPersistentState<T>(\n  key: string,\n  initialValue: T\n): [T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<typeof initialValue>(() => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  // TODO: try with key\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n}\n\nfunction App() {\n  const [students, setStudents] = useSemiPersistentState<Student[]>(\n    STORE_KEY_STUDENT_LIST,\n    []\n  );\n  const [isEdit, setIsEdit] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<Student>();\n  const [buildings, setBuildings] = useSemiPersistentState<string[]>(\n    STORE_KEY_BUILDING_LIST,\n    []\n  );\n  const [schedules, setSchedules] = useSemiPersistentState<Schedule[]>(\n    STORE_KEY_SCHEDULES,\n    []\n  );\n\n  useEffect(() => {\n    const data: Schedule[] = month.map((date) => ({ date }));\n\n    for (const student of students) {\n      for (const workday of student.workdays) {\n        const { day, building } = workday;\n        if (building) {\n          const operators = data[day - 1][`building_${building}`];\n          if (operators && !operators.includes(student.name)) {\n            operators.push(student.name);\n          } else {\n            data[day - 1][`building_${building}`] = [student.name];\n          }\n        }\n      }\n    }\n\n    // console.log(data);\n    setSchedules(data);\n  }, [students]);\n\n  const handleAddStudent = (student: Student) => {\n    const newStudent = {\n      ...student,\n      id: student.id ?? uuid(),\n      total: student.workdays.reduce(\n        (acc, { day, building }) => acc + (!!building ? 1 : 0),\n        0\n      ),\n    };\n    setStudents([...students, newStudent]);\n    setIsEdit(false);\n  };\n\n  const handleEditStudent = (newStudent: Student) => {\n    setStudents(\n      students.map((student) =>\n        student.id === newStudent.id ? newStudent : student\n      )\n    );\n    setIsEdit(false);\n    setSelectedStudent(undefined);\n  };\n\n  const selectStudent = (student: Student) => {\n    setSelectedStudent({ ...student });\n    setIsEdit(true);\n  };\n\n  const handleRemoveStudent = (id: string) => {\n    setStudents(students.filter((student) => student.id !== id));\n  };\n\n  const handleImportStudentList: ChangeEventHandler<HTMLInputElement> = async (\n    e\n  ) => {\n    setIsLoading(true);\n    console.log(\"import\", e);\n    const fileReader = new FileReader();\n    fileReader.onload = function (progressEvent) {\n      console.log(\"reading file:\", progressEvent);\n      const result = JSON.parse(progressEvent.target!.result as string);\n      console.log(result);\n      const newStudents = result.map((student: Student) => {\n        const workdays = student.workdays ?? month.map((day) => ({ day }));\n        const id = student.id ?? uuid();\n        return {\n          ...student,\n          total: 0,\n          id,\n          workdays,\n        };\n      });\n      console.log(newStudents);\n      \n      // append?\n      setStudents(newStudents);\n      setIsLoading(false);\n    };\n    fileReader.readAsText(e.target.files![0]);\n  };\n\n  return (\n    <Layout className=\"App\">\n      {/* <Space align=\"center\"> */}\n      <Sider width=\"440\">\n        <Space direction=\"vertical\">\n          <Card style={{ width: 440 }}>\n            <BuildingList\n              buildings={buildings}\n              onChange={(buildings: string[]) => setBuildings(buildings)}\n            />\n          </Card>\n          <Card style={{ width: 440 }}>\n            {/* {startImport && <ImportPanel /} */}\n\n            <AddStudentForm\n              onAddStudent={handleAddStudent}\n              onSaveStudent={handleEditStudent}\n              buildings={buildings}\n              isEdit={isEdit}\n              student={selectedStudent}\n            />\n          </Card>\n        </Space>\n      </Sider>\n\n      <Content>\n        <Header className=\"caiying-header\">\n          <Space>\n            <Button type=\"primary\">Auto Fill Blank</Button>\n            <Input\n              type=\"file\"\n              onChange={handleImportStudentList}\n              multiple={false}\n              accept=\".json\"\n              placeholder=\"Import Data\"\n            />\n            <Button type=\"default\">Export To Excel</Button>\n            <Button type=\"text\">Give It a Like</Button>\n            <Button type=\"link\">Say hello to Amagi</Button>\n          </Space>\n        </Header>\n        <StudentList\n          loading={isLoading}\n          students={students}\n          buildings={buildings}\n          onSelectStudent={selectStudent}\n          onRemoveStudent={handleRemoveStudent}\n        />\n\n        <StudentSchedules\n          loading={isLoading}\n          data={schedules}\n          buildings={buildings}\n        />\n      </Content>\n      {/* </Space> */}\n\n      {/* <StudentList /> */}\n\n      {/* <Schedule /> */}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport StudentProvider from \"./StudentProvider\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StudentProvider>\n      <App />\n    </StudentProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}