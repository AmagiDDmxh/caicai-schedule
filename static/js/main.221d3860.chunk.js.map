{"version":3,"sources":["utils.ts","StudentSchedules.tsx","AddStudentForm.tsx","StudentList.tsx","constants.ts","App.tsx","StudentProvider.tsx","reportWebVitals.ts","index.tsx"],"names":["dj","extend","isLeapYearPlugin","n","generateMonth","Array","now","month","isLeapYear","includes","getCurrentMonthDays","fill","map","_","i","weekDays","str","toUpperCase","slice","AddStudentForm","onAddStudent","onSaveStudent","student","isEdit","Form","useForm","form","useState","weekHover","setWeekHover","selectedAvailableDays","setSelectedAvailableDays","weekRowInterval","setWeekRowInterval","useEffect","fields","Object","entries","name","value","setFields","unavailables","months","handleAdd","a","validateFields","formResult","getFieldsValue","id","uuid","onResetForm","handleSaveChanges","resetFields","layout","initialValues","isManager","Item","label","rules","required","message","placeholder","valuePropName","min","max","span","type","icon","BorderInnerOutlined","onClick","equals","day","index","weekday","onMouseEnter","onMouseLeave","undefined","availables","filter","date","every","className","Group","onChange","splitEvery","week","CheckOutlined","aWeek","concat","startInterval","endInterval","hover","block","SaveOutlined","PlusOutlined","htmlType","CloseOutlined","STUDENTS","building","StudentList","props","students","columns","onSelectStudent","onRemoveStudent","title","dataIndex","key","render","record","color","EditOutlined","DeleteOutlined","danger","generateColumns","Title","dataSource","size","STORE_KEY_STUDENT_LIST","buildings","fixed","width","operators","first","second","Paragraph","BUILDINGS","random","Math","floor","shuffle","arr","newArray","len","length","j","faker","firstName","generateBuildingOperators","reduce","acc","cur","DATA","StudentSchedules","data","scroll","x","y","Content","Layout","Sider","Header","studentList","JSON","parse","window","localStorage","getItem","App","setStudents","setIsEdit","selectedStudent","setSelectedStudent","setItem","stringify","direction","level","newStudent","indexOf","DEFAULT_STUDENTS","StudentContext","createContext","StudentProvider","children","editing","Provider","addStudent","editStudent","removeStudent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.221d3860.chunk.js","sourcesContent":["import dj from \"dayjs\";\nimport isLeapYearPlugin from \"dayjs/plugin/isLeapYear\";\ndj.extend(isLeapYearPlugin);\n\nconst getCurrentMonthDays = () => {\n  const now = dj();\n  const month = now.month() + 1;\n  const isLeapYear = now.isLeapYear();\n  const isFeb = month === 2;\n  if (isFeb) {\n    if (isLeapYear) return 29;\n    return 28;\n  }\n  const ordinaryMonths = [1, 3, 5, 7, 8, 10, 12];\n  if (ordinaryMonths.includes(month)) return 31;\n  return 31;\n};\n\nexport const generateMonth = () =>\n  Array(getCurrentMonthDays())\n    .fill(0)\n    .map((_, i) => i + 1);","import React, { FC } from \"react\";\nimport { Table, Typography } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport faker from \"faker\";\nimport Column from \"antd/lib/table/Column\";\nimport { generateMonth } from \"./utils\";\n\ninterface TableProps {\n  date: any;\n  [buliding: string]: string[];\n}\n\nconst generateColumns: (buildings: number[]) => ColumnsType<TableProps> = (\n  buildings\n) => [\n  {\n    title: \"Date\",\n    dataIndex: \"date\",\n    fixed: \"left\",\n    width: 40,\n  },\n  ...buildings.map((building) => ({\n    title: `Building ${building}`,\n    dataIndex: `building_${building}`,\n    width: 80,\n    render(operators?: [string, string]) {\n      const [first, second] = operators!;\n      return (\n        <>\n          <Typography.Paragraph>{first}</Typography.Paragraph>\n          <Typography.Paragraph>{second}</Typography.Paragraph>\n        </>\n      );\n    },\n  })),\n];\n\nconst BUILDINGS = [...Array(9)].map((_, index) => index + 1);\n\n/**\n * take a max and a min\n * return integer x such that\n * min <= x < max\n */\nconst random = (max: number, min = 0) =>\n  Math.floor(Math.random() * (max - min)) + min;\nconst generateArray = (n: number) => [...Array(n)];\nconst shuffle = <T extends any>(arr: T[]) => {\n  const newArray = arr.slice();\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const j = random(i);\n    if (j !== i) {\n      newArray[i] = newArray[j];\n    }\n    newArray[j] = arr[i];\n  }\n  return newArray;\n};\n\nconst operators = generateArray(16).map(() => faker.name.firstName());\nconst randomPickTwo = <T extends any>(arr: T[]) => shuffle(arr).slice(0, 2);\n\nconst generateBuildingOperators = () =>\n  shuffle(BUILDINGS)\n    .slice(0)\n    .map((building) => ({\n      [`building_${building}`]: randomPickTwo(operators),\n    }))\n    .reduce((acc, cur) => ({ ...acc, ...cur }), {});\n\nconst DATA = generateMonth().map((date) => ({\n  date,\n  ...generateBuildingOperators(),\n}));\n\ninterface StudentSchedulesProps {\n  data?: TableProps[];\n  buildings?: number[];\n}\n\nconst StudentSchedules: FC<StudentSchedulesProps> = (props) => {\n  const { data = DATA, buildings = BUILDINGS } = props;\n\n  return (\n    <Table\n      title={() => (\n        <Typography.Title>Students Schedule with fake data</Typography.Title>\n      )}\n      columns={generateColumns(buildings)}\n      dataSource={data as any}\n      scroll={{ x: 1280, y: 800 }}\n      size=\"small\"\n    ></Table>\n  );\n};\n\nexport default StudentSchedules;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Space,\n  Checkbox,\n  Divider,\n  InputNumber,\n  Switch,\n  Row,\n  Col,\n} from \"antd\";\nimport {\n  BorderInnerOutlined,\n  CheckOutlined,\n  CloseOutlined,\n  PlusOutlined,\n  SaveOutlined,\n} from \"@ant-design/icons\";\nimport { splitEvery, equals } from \"ramda\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { Student } from \"./models\";\nimport \"./AddStudentForm.css\";\nimport { generateMonth } from \"./utils\";\n\nconst capitalize = (str: string) => str[0].toUpperCase() + str.slice(1);\nconst shortWord = (str: string) => str.slice(0, 3) + \".\";\n\nconst weekDays = [\n  \"monday\",\n  \"tuesday\",\n  \"wendsday\",\n  \"thursday\",\n  \"friday\",\n  \"saturday\",\n  \"sunday\",\n]\n  .map(capitalize)\n  .map(shortWord);\n\ninterface FormProps {\n  onAddStudent: Function;\n  onSaveStudent: Function;\n  isEdit: boolean;\n  student?: Student;\n}\n\nconst AddStudentForm: React.FC<FormProps> = ({\n  onAddStudent,\n  onSaveStudent,\n  student,\n  isEdit,\n}) => {\n  const [form] = Form.useForm<Student>();\n\n  const [weekHover, setWeekHover] = useState<number>();\n  const [selectedAvailableDays, setSelectedAvailableDays] = useState<number[]>(\n    []\n  );\n  const [weekRowInterval, setWeekRowInterval] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (student && isEdit) {\n      const fields: { name: string; value: any }[] = Object.entries(\n        student\n      ).map(([name, value]) => ({ name, value }));\n      form.setFields(fields);\n      setSelectedAvailableDays(student.unavailables);\n    }\n  }, [student, isEdit]);\n\n  const months = generateMonth();\n\n  const handleAdd = async () => {\n    const validate = await form.validateFields();\n    if (!validate) return;\n\n    const formResult = {\n      ...form.getFieldsValue(),\n      unavailables: selectedAvailableDays,\n    };\n\n    if (isEdit && formResult.id === student!.id) {\n      formResult.id = uuid();\n    }\n\n    onAddStudent(formResult);\n\n    onResetForm();\n  };\n\n  const handleSaveChanges = async () => {\n    const validate = await form.validateFields();\n    if (!validate) return;\n\n    const formResult = {\n      ...form.getFieldsValue(),\n      unavailables: selectedAvailableDays,\n    };\n    onSaveStudent(formResult);\n    onResetForm();\n  };\n\n  const onResetForm = () => {\n    form.resetFields();\n    setSelectedAvailableDays([]);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"student\"\n      layout=\"vertical\"\n      initialValues={{ isManager: false }}\n    >\n      <Form.Item\n        label=\"Name\"\n        name=\"name\"\n        rules={[{ required: true, message: \"Missing name\" }]}\n      >\n        <Input placeholder=\"Name of the student\" />\n      </Form.Item>\n\n      <Form.Item\n        name=\"isManager\"\n        valuePropName=\"checked\"\n        label=\"Is She or He a Manager?\"\n      >\n        <Switch />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Living Building Number\"\n        name=\"building\"\n        rules={[{ required: true, message: \"Missing building\" }]}\n      >\n        <InputNumber placeholder=\"Living Building Number\" min={1} max={20} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Student ID\"\n        name=\"id\"\n        // rules={[{ required: true, message: \"Missing building\" }]}\n      >\n        <Input placeholder=\"Student ID\" />\n      </Form.Item>\n\n      <Form.Item name=\"unavailables\" label=\"Unavailable Date\">\n        <Row>\n          <Col span={3}>\n            <Button\n              type=\"dashed\"\n              icon={<BorderInnerOutlined />}\n              onClick={() => {\n                if (equals(selectedAvailableDays, months)) {\n                  return setSelectedAvailableDays([]);\n                }\n                setSelectedAvailableDays(months.slice());\n              }}\n            ></Button>\n          </Col>\n\n          {weekDays.map((day, index) => {\n            const weekday = (index + 1) % 7;\n\n            return (\n              <Col\n                span={3}\n                key={day}\n                onMouseEnter={() => setWeekHover(weekday)}\n                onMouseLeave={() => setWeekHover(undefined)}\n                onClick={() => {\n                  const availables = months.filter(\n                    (date) => date % 7 === weekday\n                  );\n                  // if already has\n                  if (\n                    availables.every((date) =>\n                      selectedAvailableDays.includes(date)\n                    )\n                  ) {\n                    return setSelectedAvailableDays(\n                      selectedAvailableDays.filter(\n                        (date) => !availables.includes(date)\n                      )\n                    );\n                  }\n                  setSelectedAvailableDays([\n                    ...selectedAvailableDays,\n                    ...availables,\n                  ]);\n                }}\n                className=\"weekday\"\n              >\n                {day}\n              </Col>\n            );\n          })}\n        </Row>\n        <Checkbox.Group\n          className=\"checkbox-group\"\n          value={selectedAvailableDays}\n          onChange={(availables) => {\n            setSelectedAvailableDays(availables as number[]);\n          }}\n        >\n          {splitEvery(7, months).map((week, index) => (\n            <Row key={`week-row-${index}`}>\n              <Button\n                type=\"dashed\"\n                icon={<CheckOutlined />}\n                onMouseEnter={() =>\n                  setWeekRowInterval([index * 7 + 1, index * 7 + 7])\n                }\n                onMouseLeave={() => setWeekRowInterval([])}\n                onClick={() => {\n                  const aWeek = Array(7)\n                    .fill(0)\n                    .map((_, i) => index * 7 + i + 1);\n\n                  if (\n                    aWeek.every((date) => selectedAvailableDays.includes(date))\n                  ) {\n                    return setSelectedAvailableDays(\n                      selectedAvailableDays.filter(\n                        (date) => !aWeek.includes(date)\n                      )\n                    );\n                  }\n                  setSelectedAvailableDays(selectedAvailableDays.concat(aWeek));\n                }}\n              ></Button>\n              {week.map((day) => {\n                const [startInterval, endInterval] = weekRowInterval!;\n\n                const hover =\n                  day % 7 === weekHover ||\n                  (startInterval <= day && day <= endInterval);\n                return (\n                  <Col span={3} key={day}>\n                    <Checkbox\n                      className={`checkbox-column ${hover ? \"hover\" : \"\"}`}\n                      value={day}\n                    >\n                      {day}\n                    </Checkbox>\n                  </Col>\n                );\n              })}\n            </Row>\n          ))}\n        </Checkbox.Group>\n      </Form.Item>\n\n      <Divider />\n      {isEdit && (\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            block\n            icon={<SaveOutlined />}\n            onClick={handleSaveChanges}\n          >\n            Save Changes\n          </Button>\n        </Form.Item>\n      )}\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          block\n          icon={<PlusOutlined />}\n          onClick={handleAdd}\n        >\n          {isEdit ? \"Duplicate Student\" : \"Add Student\"}\n        </Button>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"default\"\n          block\n          htmlType=\"button\"\n          icon={<CloseOutlined />}\n          onClick={onResetForm}\n        >\n          Reset Form\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default AddStudentForm;\n","import React, { useState } from \"react\";\nimport { Badge, Button, Card, Row, Space, Table, Tag, Typography } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  ExclamationCircleOutlined,\n  SmileOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\n\nimport { Student } from \"./models\";\nimport { generateMonth } from \"./utils\";\n\ninterface Props {\n  students: Student[];\n  onSelectStudent: Function;\n  onRemoveStudent: Function;\n}\n\nconst months = generateMonth();\n\nconst generateColumns: (props: Props) => ColumnsType<Student> = ({\n  onSelectStudent,\n  onRemoveStudent,\n}) => [\n  {\n    title: \"姓名\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n  },\n  // {\n  //   title: \"住址\",\n  //   dataIndex: \"building\",\n  //   key: \"building\",\n  // },\n  {\n    title: \"Workdays\",\n    dataIndex: \"unavailables\",\n    key: \"unavailables\",\n    render: (unavailables: number[], record) => (\n      <>\n        {months.map((date) => {\n          let color = unavailables.includes(date) ? \"yellow\" : \"blue\";\n          // if (unavailable === \"loser\") {\n          //   color = \"volcano\";\n          // }\n          return (\n            <Tag color={color} key={date}>\n              {date}\n            </Tag>\n          );\n        })}\n      </>\n    ),\n  },\n  {\n    title: \"Action\",\n    key: \"action\",\n    render: (value, record) => {\n      return (\n        <Space>\n          <Button type=\"ghost\" icon={<EditOutlined />} onClick={() => onSelectStudent(record)}>\n            Edit\n          </Button>\n          <Button\n            type=\"ghost\"\n            icon={<DeleteOutlined />}\n            onClick={() => onRemoveStudent(record.id)}\n            danger\n          >\n            Remove\n          </Button>\n        </Space>\n      );\n    },\n  },\n];\n\nconst STUDENTS: Student[] = [\n  { name: \"c\", id: \"2\", building: 2, unavailables: [2, 3] },\n];\n\nconst StudentList: React.FC<Props> = (props) => {\n  const { students = STUDENTS } = props;\n\n  const columns = generateColumns(props);\n\n  return (\n    <Table\n      title={() => <Typography.Title>Student List</Typography.Title>}\n      columns={columns}\n      dataSource={students}\n      size=\"small\"\n    />\n  );\n};\n\nexport default StudentList;\n","export const STORE_KEY_STUDENT_LIST = '__STUDENT_LIST__';\n","import React, { useEffect, useState } from \"react\";\nimport { Card, Space, Layout, Button, Typography } from \"antd\";\nimport { v4 as uuid } from \"uuid\";\nimport { findIndex, propEq } from \"ramda\";\n\nimport { Student } from \"./models\";\nimport AddStudentForm from \"./AddStudentForm\";\nimport StudentList from \"./StudentList\";\nimport { STORE_KEY_STUDENT_LIST } from \"./constants\";\nimport \"./App.css\";\nimport StudentSchedules from \"./StudentSchedules\";\n\nconst { Content, Sider, Header } = Layout;\n\nconst studentList = JSON.parse(\n  window.localStorage.getItem(STORE_KEY_STUDENT_LIST) ?? \"[]\"\n);\n\nfunction App() {\n  const [students, setStudents] = useState<Array<Student>>(studentList);\n  const [isEdit, setIsEdit] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<Student>();\n  const [startImport, setStartImport] = useState(false);\n\n  useEffect(\n    () =>\n      localStorage.setItem(STORE_KEY_STUDENT_LIST, JSON.stringify(students)),\n    [students]\n  );\n\n  const handleAddStudent = (student: Student) => {\n    const newStudent = {\n      ...student,\n      id: student.id ?? uuid(),\n    };\n    setStudents([...students, newStudent]);\n    setIsEdit(false);\n  };\n\n  const handleEditStudent = (newStudent: Student) => {\n    const index = students.indexOf(selectedStudent!);\n    setStudents([\n      ...students.slice(0, index),\n      newStudent,\n      ...students.slice(index + 1),\n    ]);\n  };\n\n  const selectStudent = (student: Student) => {\n    setSelectedStudent({ ...student });\n    setIsEdit(true);\n  };\n\n  const handleRemoveStudent = (id: string) => {\n    setStudents(students.filter((student) => student.id !== id));\n  };\n\n  return (\n    <Layout className=\"App\">\n      {/* <Space align=\"center\"> */}\n      <Sider width=\"338\">\n        <Space direction=\"vertical\">\n          <Card>\n            <Typography.Title level={5}>\n              Incoming Building List... :&gt;\n            </Typography.Title>\n            <Typography.Paragraph>\n              Developing... Wait for me\n            </Typography.Paragraph>\n            {/* <BuildingList /> */}\n          </Card>\n          <Card>\n            {/* {startImport && <ImportPanel /} */}\n\n            <AddStudentForm\n              onAddStudent={handleAddStudent}\n              onSaveStudent={handleEditStudent}\n              isEdit={isEdit}\n              student={selectedStudent}\n            />\n          </Card>\n        </Space>\n      </Sider>\n\n      <Content>\n        <Header className=\"caiying-header\">\n          <Space>\n            <Button type=\"primary\">Auto Fill Blank</Button>\n            <Button type=\"ghost\">Import Data</Button>\n            <Button type=\"default\">Export To Excel</Button>\n            <Button type=\"text\">Give It a Like</Button>\n            <Button type=\"link\">Say hello to Amagi</Button>\n          </Space>\n        </Header>\n        <StudentList\n          students={students}\n          onSelectStudent={selectStudent}\n          onRemoveStudent={handleRemoveStudent}\n        />\n\n        <StudentSchedules />\n      </Content>\n      {/* </Space> */}\n\n      {/* <StudentList /> */}\n\n      {/* <Schedule /> */}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React, { createContext, useContext, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Student } from \"./models\";\nimport { STORE_KEY_STUDENT_LIST } from \"./constants\";\n\ntype StudentFunc = (student: Student) => void;\n\ninterface StudentContextProps {\n  students?: Student[];\n  addStudent?: StudentFunc;\n  selectedStudent?: Student;\n  removeStudent?: StudentFunc;\n  editStudent?: StudentFunc;\n  editing?: boolean;\n}\nconst DEFAULT_STUDENTS: Student[] = JSON.parse(\n  window.localStorage.getItem(STORE_KEY_STUDENT_LIST) ?? \"[]\"\n);\n\n// TODO: default props should be provided?\nconst StudentContext = createContext<StudentContextProps>({});\nexport const useStudent = () => useContext(StudentContext);\n\n// TODO: Finish provider\nconst StudentProvider: React.FC = ({ children }) => {\n  const [editing, setEditing] = useState(false);\n  const [students, setStudents] = useState<Student[]>(DEFAULT_STUDENTS);\n  const [selectedStudent, setSelectedStudent] = useState<Student>();\n\n  const addStudent: StudentFunc = (student) => {\n    setStudents([\n      ...students,\n      {\n        // @ts-ignore\n        // Should be override by student otherwise take this instead\n        id: uuid(),\n        ...student,\n      },\n    ]);\n  };\n  const editStudent = () => {};\n  const removeStudent = () => {};\n\n  return (\n    <StudentContext.Provider\n      value={{\n        students: DEFAULT_STUDENTS,\n        addStudent,\n        editStudent,\n        removeStudent,\n        editing,\n        selectedStudent,\n        // setEditing,\n      }}\n    >\n      {children}\n    </StudentContext.Provider>\n  );\n};\n\nexport default StudentProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport StudentProvider from \"./StudentProvider\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StudentProvider>\n      <App />\n    </StudentProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}